clc

controlHeight = input('Enter controlled-descent height (m):');
fprintf('\n');
rho = input('Enter fluid density (kg/m^3):');
fprintf('\n');

%Givens
mass = 15600; %kg --mass of the first stage
initialVelocity = 1500; %km/h --at a height of 10km
initialHeight = 10; %km -- height at which we start calculations
%Given Calulatables
gravity  = mass * 9.8; %force of gravity acting downwards on the rocket

for i=1:1:3 %To set dt of 1,then 0.1, then 0.01s
    dt = 1/10^(i-1);
    
    %Initialize Variables for while loop
    height = initialHeight * 1000; %initalHeight converted to meters
    velocity = (initialVelocity * 1000) /60^2; %initialVelcoity converted to m/s
    controlTime  = 0.00; %Time the controlled descent is active
    timeElapsed = 0.00; %Time rocket is off the ground
    
    while height > 0
        
        if (controlTime == 0.00 && height <= controlHeight) || (controlTime > 0.00 && controlTime < 60.00)
            thrusters = 174850; %N --Force to the thrusters slowing the descent
            controlTime = controlTime + dt;
            %disp('Thrusters were activated');
        else 
            thrusters = 0; %Thrusters are off unless indicated
        end

        %Calculating variables for next loop
        force = gravity - calculateDrag(rho, velocity) - thrusters;
        acceleration = force/mass;
        
        height = height - velocity*dt;
        
        velocity = velocity + acceleration*dt;
        
        timeElapsed = timeElapsed + dt;
        
    end
    %After height = 0
    disp(sprintf('dt = %.2f s, Total time = %.0f s, Position = %.0f m', dt, timeElapsed, height));
end
%After dt = 0.01s run is over
disp(sprintf('landing speed: %.0f km/h', (velocity*60^2)/1000));
if velocity < (10*1000)/60^2
    disp(sprintf('Successful landing'));
else
    disp(sprintf('Non-successful landing'));
end

function drag = calculateDrag(fluidDensity, currentVelocity)
    CrossSectionalArea = pi*1.85^2; %The radius in the equation is just the given diameter divided by two
    drag = 0.5*fluidDensity*CrossSectionalArea*currentVelocity^2; %The assumed drag coefficient was one so it was not included
end