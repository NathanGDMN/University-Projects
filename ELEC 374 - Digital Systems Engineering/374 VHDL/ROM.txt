library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;		 
use ieee.std_logic_unsigned.all;

entity ROM is 
  port (	Clock   : in std_logic;
	Reset	: in std_logic;	
	Enable	: in std_logic;
	Read	: in std_logic;
	Write	: in std_logic; -- Not used
	Address	: in std_logic_vector(4 downto 0); --See if you need to change number of address bits 
	Data_out: out std_logic_vector(31 downto 0);
	Data_in: in std_logic_vector(31 downto 0) -- not used 
  );
end ROM;

architecture behavior of ROM is

    	type ROM_Array is array (0 to 15) 
		of std_logic_vector(31 downto 0);

	constant Content: ROM_Array := (
        0 => "00000000000000000000000000000001",		-- How to set  
        1 => "00000000000000000000000000000010",		-- 32-bit register
        2 => "00000000000000000000000000000011",		-- values
        3 => "00000000000000000000000000000100",       		--
        4 => "00000000000000000000000000000101",		--
        5 => "00000000000000000000000000000110",       		--
        6 => "00000000000000000000000000000111",		--
        7 => "00000000000000000000000000001000",       		--
        8 => "00000000000000000000000000001001",       		--
        9 => "00000000000000000000000000001010",       		--
        10 => "00000000000000000000000000001011",		--
	11 => "00000000000000000000000000001100",       	--
        12 => "00000000000000000000000000001101",      		--
        13 => "00000000000000000000000000001110",		--
	14 => "00000000000000000000000000001111",		--
	15 => "00000000000000000000000011111111"		--
	);  

begin
	process(Clock, Reset, Read, Address)
		if(Reset = '0') then 
			Data_out <= (others => '0');
		elsif (rising_edge(Clock)) then
			if (Enable = '1') then
				if ( Read = '1' ) then
					Data_out <= Content(conv_integer(Address));
				else
					Data_out <= "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
				end if;
			end if;
		end if;
	end process;
end architecture;	
			

